{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Getting Started","text":"<p>This library contains the <code>AutoFeatRegressor</code> and <code>AutoFeatClassifier</code> models with a similar interface as <code>scikit-learn</code> models:</p> <ul> <li><code>fit()</code> function to fit the model parameters</li> <li><code>predict()</code> function to predict the target variable given the input</li> <li><code>predict_proba()</code> function to predict probabilities of the target variable given the input (classifier only)</li> <li><code>score()</code> function to calculate the goodness of the fit (R^2/accuracy)</li> <li><code>fit_transform()</code> and <code>transform()</code> functions, which extend the given data by the additional features that were engineered and selected by the model</li> </ul> <p>When calling the <code>fit()</code> function, internally the <code>fit_transform()</code> function will be called, so if you're planing to call <code>transform()</code> on the same data anyways, just call <code>fit_transform()</code> right away. <code>transform()</code> is mostly useful if you've split your data into training and test data and did not call <code>fit_transform()</code> on your whole dataset. The <code>predict()</code> and <code>score()</code> functions can either be given data in the format of the original dataframe that was used when calling <code>fit()</code>/<code>fit_transform()</code> or they can be given an already transformed dataframe.</p> <p>In addition, only the feature selection part is also available in the <code>FeatureSelector</code> model.</p> <p>Furthermore (as of version 2.0.0), minimal feature selection (removing zero variance and redundant features), engineering (simple product and ratio of features), and scaling (power transform to make features more normally distributed) is also available in the <code>AutoFeatLight</code> model.</p> <p>The <code>AutoFeatRegressor</code>, <code>AutoFeatClassifier</code>, and <code>FeatureSelector</code> models need to be fit on data without NaNs, as they internally call the sklearn <code>LassoLarsCV</code> model, which can not handle NaNs. When calling <code>transform()</code>, NaNs (but not <code>np.inf</code>) are okay.</p> <p>The autofeat examples notebook contains a simple usage example - try it out! :) Additional examples can be found in the autofeat benchmark notebooks for regression (which also contains the code to reproduce the results from the paper mentioned below) and classification, as well as the testing scripts.</p> <p>Please keep in mind that since the <code>AutoFeatRegressor</code> and <code>AutoFeatClassifier</code> models can generate very complex features, they might overfit on noise in the dataset, i.e., find some new features that lead to good prediction on the training set but result in a poor performance on new test samples. While this usually only happens for datasets with very few samples, we suggest you carefully inspect the features found by <code>autofeat</code> and use those that make sense to you to train your own models.</p> <p>Depending on the number of <code>feateng_steps</code> (default 2) and the number of input features, <code>autofeat</code> can generate a very huge feature matrix (before selecting the most appropriate features from this large feature pool). By specifying in <code>feateng_cols</code> those columns that you expect to be most valuable in the feature engineering part, the number of features can be greatly reduced. Additionally, <code>transformations</code> can be limited to only those feature transformations that make sense for your data. Last but not least, you can subsample the data used for training the model to limit the memory requirements. After the model was fit, you can call <code>transform()</code> on your whole dataset to generate only those few features that were selected during <code>fit()</code>/<code>fit_transform()</code>.</p>"},{"location":"#installation","title":"Installation","text":"<p>You can either download the code from here and include the autofeat folder in your <code>$PYTHONPATH</code> or install (the library components only) via pip:</p> <pre><code>$ pip install autofeat\n</code></pre> <p>The library requires Python 3! Other dependencies: <code>numpy</code>, <code>pandas</code>, <code>scikit-learn</code>, <code>sympy</code>, <code>joblib</code>, <code>pint</code> and <code>numba</code>.</p>"},{"location":"CHANGELOG/","title":"Changelog","text":""},{"location":"CHANGELOG/#213-2024-07-04","title":"2.1.3 (2024-07-04)","text":"<ul> <li>minor style and type fixes</li> <li>improved package structure</li> <li>added changelog &amp; docs</li> </ul>"},{"location":"CHANGELOG/#212-2023-07-28","title":"2.1.2 (2023-07-28)","text":"<ul> <li>converted most print statements to logging outputs</li> <li>moved tests and make pytest compatible</li> <li>more qa and style fixes (using ruff)</li> </ul>"},{"location":"CHANGELOG/#211-2023-06-25","title":"2.1.1 (2023-06-25)","text":"<ul> <li>fixed annotations for backwards compatibility</li> </ul>"},{"location":"CHANGELOG/#210-2023-05-14","title":"2.1.0 (2023-05-14)","text":"<ul> <li>added <code>predict_proba</code> functionality for classifier (by @mglowacki100)</li> <li>formatting fixes (using black)</li> <li>added type hints</li> </ul>"},{"location":"CHANGELOG/#2010-2021-10-28","title":"2.0.10 (2021-10-28)","text":"<ul> <li>fixed issue #29 (by @stephanos-stephani)</li> </ul>"},{"location":"CHANGELOG/#209-2021-06-12","title":"2.0.9 (2021-06-12)","text":"<ul> <li>speed up correlation computation; fixes issue #28</li> </ul>"},{"location":"CHANGELOG/#208-2021-06-03","title":"2.0.8 (2021-06-03)","text":"<ul> <li>use numba jit for feature generation (by @jeethu)</li> </ul>"},{"location":"CHANGELOG/#207-2021-06-02","title":"2.0.7 (2021-06-02)","text":"<ul> <li>use numba for standardization (by @jeethu)</li> </ul>"},{"location":"CHANGELOG/#205-2021-01-16","title":"2.0.5 (2021-01-16)","text":"<ul> <li>fixed TypeError while running tests with scikit-learn 0.24.0 (by @jeethu)</li> <li>minor efficiency improvements in apply_transformations (by @jeethu)</li> <li>use numba to accelerate feateng (by @jeethu)</li> </ul>"},{"location":"CHANGELOG/#204-2020-11-30","title":"2.0.4 (2020-11-30)","text":"<ul> <li>update sympy call to work with new version</li> </ul>"},{"location":"CHANGELOG/#203-2020-11-11","title":"2.0.3 (2020-11-11)","text":"<ul> <li>turn scaling off by default</li> <li>remove more correlated cols by starting with the features that has the most correlated columns</li> </ul>"},{"location":"CHANGELOG/#202-2020-11-11","title":"2.0.2 (2020-11-11)","text":"<ul> <li>fixed typo</li> </ul>"},{"location":"CHANGELOG/#201-2020-11-11","title":"2.0.1 (2020-11-11)","text":"<ul> <li>use correlation threshold in autofeat light as parameter</li> </ul>"},{"location":"CHANGELOG/#200-2020-11-07","title":"2.0.0 (2020-11-07)","text":"<ul> <li>added <code>AutoFeatLight</code> model for simple feature selection (removing zero variance and redundant features), engineering (product and ratio of original features) and power transform to make features more normally distributed</li> </ul>"},{"location":"CHANGELOG/#113-2020-07-21","title":"1.1.3 (2020-07-21)","text":"<ul> <li>categorical columns can contain strings now</li> </ul>"},{"location":"CHANGELOG/#112-2020-02-28","title":"1.1.2 (2020-02-28)","text":"<ul> <li>don't generate addition/subtr features at the highest level, i.e., if they would just be removed anyways</li> </ul>"},{"location":"CHANGELOG/#111-2020-02-25","title":"1.1.1 (2020-02-25)","text":"<ul> <li>use LassoLarsCV instead of RidgeCV as final regression model</li> <li>minor tweaks to feature selection to avoid longer formulas</li> </ul>"},{"location":"CHANGELOG/#110-2020-02-24","title":"1.1.0 (2020-02-24)","text":"<ul> <li>include categorical columns for feateng by default</li> <li>add correlation filtering back into feat selection</li> </ul>"},{"location":"CHANGELOG/#100-2020-02-24","title":"1.0.0 (2020-02-24)","text":"<ul> <li>changed autofeat model to differentiate between regression and classification tasks, adding the <code>AutoFeatRegressor</code> and <code>AutoFeatClassifier</code> classes</li> <li>simplified feature selection process</li> </ul>"},{"location":"CHANGELOG/#025-2019-05-12","title":"0.2.5 (2019-05-12)","text":"<ul> <li>more robust featsel with noise filtering</li> </ul>"},{"location":"CHANGELOG/#022-2019-05-09","title":"0.2.2 (2019-05-09)","text":"<ul> <li>change default value for <code>feateng_steps</code> to 2, in line with results on realworld datasets</li> </ul>"},{"location":"CHANGELOG/#021-2019-05-09","title":"0.2.1 (2019-05-09)","text":"<ul> <li>make feature selection less prone to overfitting</li> </ul>"},{"location":"CHANGELOG/#020-2019-05-02","title":"0.2.0 (2019-05-02)","text":"<ul> <li>add <code>FeatureSelector</code> class to use feature selection separately</li> <li>make feature selection more robust and move into featsel</li> <li>make the models more sklearn like and test with sklearn estimator tests</li> <li>replace sympy's ufuncify with lambdify</li> <li>better logs</li> <li>use immutable default arguments</li> <li>make pi theorem optional</li> <li>handle nans in transform</li> </ul>"},{"location":"CHANGELOG/#011-2019-01-23","title":"0.1.1 (2019-01-23)","text":"<ul> <li>updated documentation</li> </ul>"},{"location":"CHANGELOG/#010-2019-01-22","title":"0.1.0 (2019-01-22)","text":"<ul> <li>initial release with regression model</li> </ul>"},{"location":"science/","title":"The Science","text":""},{"location":"science/#paper","title":"Paper","text":"<p>For further details on the model and implementation please refer to the paper  - and of course if any of this code was helpful for your research, please consider citing it:</p> <pre><code>@inproceedings{horn2019autofeat,\n  title={The autofeat Python Library for Automated Feature Engineering and Selection},\n  author={Horn, Franziska and Pack, Robert and Rieger, Michael},\n  booktitle={Joint European Conference on Machine Learning and Knowledge Discovery in Databases},\n  pages={111--120},\n  year={2019},\n  organization={Springer}\n}\n</code></pre>"},{"location":"science/#pydata-talk","title":"PyData Talk","text":"<p>If you don't like reading, you can also watch a video of my talk at the PyData conference about automated feature engineering and selection with <code>autofeat</code>.</p>"}]}